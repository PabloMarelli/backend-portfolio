
name: Deploy Portfolio to Ecs

on:
  push:
    branches:
      - dev
env:
  ENVIRONMENT: dev
  AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  IMAGE: "ems-core"

jobs:

#-------------------------------------------------------------------------------------------------------------------------------
# BUILD AND DEPLOY
#-------------------------------------------------------------------------------------------------------------------------------

  setup-build-publish:
    name: Setup, Build and Publish
    runs-on: ubuntu-20.04
    if: "contains(github.event.head_commit.message, 'deploy')"
    steps:

    # Checkout repository code
    - name: Checkout
      uses: actions/checkout@v2

    # Configure AWS Credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      env:
        AWS_ROLE_TO_ASSUME: "ems-lsh-dev-github-actions"
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets[env.AWS_ROLE_TO_ASSUME] }}
        role-duration-seconds: 3600

    # Loging to AWS Elastic Container Registry
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Update task definition family name
    - name: Download task definition
      env:
        TASK_NAME: ${{ env.ENVIRONMENT }}-${{ env.IMAGE }}
      run: | 
        aws ecs describe-task-definition --task-definition $TASK_NAME --query taskDefinition > task-definition.json

    - name: Sets DataBase host and pass
      run: |
        echo "DB_HOST=$(aws ssm get-parameter --name /${{ env.ENVIRONMENT }}/ems/rds/custom_address --region us-east-1 --with-decryption | jq .Parameter.Value | tr -d \")" >> $GITHUB_ENV
        echo "DB_PASS=$(aws ssm get-parameter --name /${{ env.ENVIRONMENT }}/ems/rds/admin_password --region us-east-1 --with-decryption | jq .Parameter.Value | tr -d \")" >> $GITHUB_ENV
        echo "REDIS_URL=$(aws ssm get-parameter --name /${{ env.ENVIRONMENT }}/ems/redis/endpoint --region us-east-1 --with-decryption | jq .Parameter.Value | tr -d \")" >> $GITHUB_ENV
        echo "SSM_CLIENT_ID=$(aws ssm get-parameter --name '/${{ env.ENVIRONMENT }}/ems/okta' --region us-east-1 --with-decryption --query 'Parameter.Value' --output text | jq -r '.SSM_CLIENT_ID')" >> $GITHUB_ENV
        echo "SSM_CLIENT_SECRET=$(aws ssm get-parameter --name '/${{ env.ENVIRONMENT }}/ems/okta' --region us-east-1 --with-decryption --query 'Parameter.Value' --output text | jq -r '.SSM_CLIENT_SECRET')" >> $GITHUB_ENV
        echo "SSM_REDIRECT_URI=$(aws ssm get-parameter --name '/${{ env.ENVIRONMENT }}/ems/okta' --region us-east-1 --with-decryption --query 'Parameter.Value' --output text | jq -r '.SSM_REDIRECT_URI')" >> $GITHUB_ENV
        
    # Sed for change Database connection in settings.py
    - name: Change databse connection
      id: database-settings
      run: |
        cp events/settings_aws.py events/settings.py
        sed -i 's/ENVIRONMENT_VAR/${{ env.ENVIRONMENT }}/g' events/settings.py
        sed -i 's/DB_USERNAME/admin/g' events/settings.py
        sed -i 's/DB_PASSWORD/${{ env.DB_PASS }}/g' events/settings.py
        sed -i 's/SSM_CLIENT_ID/${{ env.SSM_CLIENT_ID }}/g' events/settings.py
        sed -i 's/SSM_SSM_CLIENT_SECRET/${{ env.SSM_CLIENT_SECRET }}/g' events/settings.py
        sed -i 's/SSM_REDIRECT_URI/${{ env.SSM_REDIRECT_URI }}/g' events/settings.py
        sed -i 's/DB_HOST/${{ env.DB_HOST }}/g' events/settings.py
        sed -i 's/REDIS_URL/${{ env.REDIS_URL }}/g' events/settings.py
        sed -i 's/EMS_DEBUG/True/g' events/settings.py
        
    # Build the Docker image and tag it.
    - name: Build and tag the image.
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-${{ env.IMAGE }} #! Repository name
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT_PARAM: ${{ env.ENVIRONMENT }} #! environment
      run: |
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY || true
        docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg environmentParam=$ENVIRONMENT_PARAM .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # Push the docker image to AWS Elastic Container Registry  
    - name: Push the image to ECR
      id: push-image-ecr
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-${{ env.IMAGE }} #! Repository name
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # Update the ECS Task Definition
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ENVIRONMENT }}-${{ env.IMAGE }}
        image: ${{ steps.push-image-ecr.outputs.image }}

    # Deploy the Task Definition to the ECS Service
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ENVIRONMENT }}-${{ env.IMAGE }}
        cluster: ${{ env.ENVIRONMENT }}-ems-ecs-cluster
        wait-for-service-stability: true
